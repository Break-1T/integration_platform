name: Publish NuGet Package

on:
  push:
    branches:
      - master # Запускать на основной ветке
  workflow_dispatch: # Позволяет запускать вручную

jobs:
  tag_and_publish:
    runs-on: ubuntu-latest

    env:
      MAJOR_VERSION: 1 # Задаем мажорную версию здесь
      MINOR_VERSION: 0 # Задаем минорную версию здесь

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x' # Укажите нужную версию .NET SDK

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: |
          # Получаем последний тег, если он существует
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$tag" ]; then
            tag="v${MAJOR_VERSION}.${MINOR_VERSION}.0"
          fi
          echo "Последний тег: $tag"
          echo "tag=$tag" >> $GITHUB_ENV

      - name: Calculate next build number
        id: next_tag
        run: |
          # Удаляем префикс 'v' из последнего тега и извлекаем номер билда
          tag_without_v="${tag#v}"
          IFS='.' read -ra VERSION <<< "$tag_without_v"
          
          major="${MAJOR_VERSION}"
          minor="${MINOR_VERSION}"
          build=${VERSION[2]}

          # Инкрементируем только номер билда
          next_build=$((build + 1))
          new_tag="v$major.$minor.$next_build"

          # Проверка существования тега на удалённом репозитории и инкремент при необходимости
          while git ls-remote --tags origin | grep -q "refs/tags/$new_tag"; do
            next_build=$((next_build + 1))
            new_tag="v$major.$minor.$next_build"
          done

          echo "next_tag=$new_tag" >> $GITHUB_ENV
          echo "package_version=${new_tag#v}" >> $GITHUB_ENV # Для версии пакета без 'v'
          echo "Новый тег: $new_tag"

      - name: Create new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.next_tag }}
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} ${{ env.next_tag }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Pack project
        run: dotnet pack --configuration Release -o ./nuget -p:PackageVersion=${{ env.package_version }}

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push "./nuget/*.nupkg" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key "$GITHUB_TOKEN"
